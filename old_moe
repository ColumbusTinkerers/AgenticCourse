import asyncio
from agents import Agent, Runner, OpenAIChatCompletionsModel, ModelSettings
from openai import AsyncOpenAI

model_settings = ModelSettings(temperature=0.4)
local_model = OpenAIChatCompletionsModel(
    model="granite3-moe:1b",
    openai_client=AsyncOpenAI(base_url="http://localhost:11434/v1", api_key="NONE")
)

flight_instructions = "You are a flight booking assistant. Given a user query about flights, return a JSON object with flight details: flight_number (string), airline (string), departure_time (string, ISO format), arrival_time (string, ISO format), price (number). Ensure valid JSON only."

hotel_instructions = "You are a hotel booking assistant. Given a user query about hotels, return a JSON object with hotel details: hotel_name (string), address (string), room_type (string), price_per_night (number). Ensure valid JSON only."

flight_agent = Agent(
    name="flightAgent",
    instructions=flight_instructions,
    model=local_model,
    model_settings=model_settings
)

hotel_agent = Agent(
    name="hotelAgent",
    instructions=hotel_instructions,
    model=local_model,
    model_settings=model_settings
)

description_flight = "Retrieve flight details for the user's trip query."
description_hotel = "Retrieve hotel details for the user's trip query."

#flight_tool = flight_agent.as_tool(tool_name="get_flight_details", tool_description=description_flight)
#hotel_tool = hotel_agent.as_tool(tool_name="get_hotel_details", tool_description=description_hotel)
async def mock_flight_tool(query):
    return {
        "flight_number": "AA123",
        "airline": "American Airlines",
        "departure_time": "2025-10-10T08:00:00Z",
        "arrival_time": "2025-10-10T10:00:00Z",
        "price": 250
    }

async def mock_hotel_tool(query):
    return {
        "hotel_name": "Hilton Columbus Downtown",
        "address": "401 N High St, Columbus, OH",
        "room_type": "Standard King",
        "price_per_night": 150
    }

flight_tool = mock_flight_tool
hotel_tool = mock_hotel_tool
tools = [flight_tool, hotel_tool]

#instructions = "You are a travel assistant. Analyze the user query to determine if flights, hotels, or both are needed. Call the appropriate tools (get_flight_details and/or get_hotel_details) with the full query as input to get JSON details. Then, create a concise, user-friendly summary of the travel plan, including all details. If a service is not requested, note it. Always use tools for details; do not invent information."
instructions = """
You are a travel assistant. Analyze the user query to determine if flights, hotels, or both are needed. Follow these steps:
1. If flights are mentioned, call the `get_flight_details` tool with the full query as input to retrieve a JSON object with flight details.
2. If hotels are mentioned, call the `get_hotel_details` tool with the full query as input to retrieve a JSON object with hotel details.
3. Combine the JSON outputs from the tools into a concise, user-friendly summary that includes all specific details (e.g., flight number, airline, departure time, arrival time, price for flights; hotel name, address, room type, price per night for hotels).
4. If a service is not requested, explicitly state that it was not included in the query.
5. Do not suggest using tools manually or provide generic advice (e.g., recommending external websites). Always rely on the tool outputs for specific details.
6. If tool calls fail or return no data, indicate that no results were found and suggest retrying or checking the query.
"""

travel_agent = Agent(
    name="Travel Agent",
    instructions=instructions,
    tools=tools,
    model=local_model,
    model_settings=model_settings
)

async def main():
    query = "I am interested in a trip to Columbus next Friday, coming in from NYC. I need flights and a hotel downtown."
    result = await Runner.run(travel_agent, query)
    print(result)

if __name__ == "__main__":
    asyncio.run(main())